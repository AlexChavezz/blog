import Head from "next/head";
import { getFileBySlug, getFiles } from "../../lib/mdx";
import { MDXRemote } from "next-mdx-remote";
import styles from '../../styles/SlugPage.module.css';
import { Header } from "../../components/Header";
import Image from "next/image";
import { useState, useEffect } from "react";
import replyLoge from '../../assets/reply.svg';
import likeLoge from '../../assets/like.svg';

// -> ![text](/imageToShow.jpg "title")

const Comment = ({ author, comment, likes, replies, isReply, reply }) => {
    const [replay, setReplay] = useState(false);
    const sendReplay = () => {

    }
    function toggleReplyForm()
    {
        setReplay(!replay);
    }
    return (
        <>
            <article className={isReply? styles.replyContainer : styles.commentContainer}>
                <span>{author}</span>
                <p>{comment||reply}</p>
                <div className={styles.commentIconsContainer}>
                {
                    !isReply &&
                    <div 
                        className={styles.commentOptionContainer}
                    >
                        <div
                            className={styles.commentIcon}
                        >
                            <Image
                                src={likeLoge}
                                alt="like"
                                title="like"
                            />
                        </div>
                        <span>{likes}</span>
                    </div>
                }
                    <div className={styles.commentOptionContainer}
                        onClick={toggleReplyForm}
                    >
                        <div
                            className={styles.commentIcon}
                        >
                            <Image
                                src={replyLoge}
                                alt="reply"
                                title="reply"
                            />

                        </div>
                        <span>Responder</span>
                    </div>
                </div>
                {
                    replay &&
                    <>
                        <textarea 
                            placeholder="Respuesta"
                            className={styles.textArea}
                        >
                        </textarea>
                        <div
                            className={styles.buttonsContainer}
                        >
                            <Button 
                                className={styles.cancelButton}
                                text="Cancelar"
                                onSubmit={toggleReplyForm}
                            />
                            <Button
                                className={styles.sendButton}
                                text="Responder"
                            />
                        </div>
                    </>
                }
            </article>
            {
                replies &&
                replies.map((reply) => <Comment {...reply} key={reply._id} isReply/>)
            }
        </>
    );
}

const Button = ({onSubmit, text, className, }) => {
    return (
        <button
            className={className}
            onClick={onSubmit}
        >
            {
                text
            }
        </button>
    );
}

export default function Post(props) {

    const [comments, setComments] = useState([]);
    useEffect(() => {
        async function getComments() {
            const response = await fetch(`http://localhost:8080/api/get/${props.frontMatter.title}`);
            const data = await response.json();
            console.log(data)
            setComments(data);
        }
        getComments();
    }, [])
    return (
        <>
            <Head>
                <title>{props.frontMatter.title}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Header />
            <section className={styles.mainContentContainer}>
                <article className={styles.articleContainer}>
                    <p className={styles.articleDate}>{props.frontMatter.date}</p>
                    <h1 className={styles.articleTitle}>{props.frontMatter.title}</h1>
                    <span className={styles.articleAuthor}>
                        {"  By " + props.frontMatter.author}
                    </span>
                    <div className={styles.mainImageContainer}>
                        <Image
                            src={`/${props.frontMatter.main_image}`}
                            width={1000}
                            height={500}
                            className={styles.ImageMain}
                            alt={"main image"}
                        />
                    </div>
                    <div className={styles.articleContent}>
                        <MDXRemote {...props.source} />
                    </div>
                    <div
                        className={styles.commentsContainer}
                    >
                        <h2 className={styles.commentsTitle}> COMENTARIOS </h2>
                        <section
                            className={styles.commentsSection}
                        >
                            {
                                comments.map((comment) => <Comment {...comment} key={comment._id} />)
                            }
                        </section>
                        <textarea
                            className={styles.commentInput}
                            placeholder="Leave a comment"
                        >

                        </textarea>
                    </div>
                </article>
            </section>
        </>
    );
}

export async function getStaticProps({ params }) {
    const { source, frontMatter } = await getFileBySlug(params.slug);
    return {
        props: {
            source,
            frontMatter
        }
    }
}

export async function getStaticPaths() {
    const array = await getFiles();
    const paths = array.map(post => ({
        params: {
            slug: post.replace(/\.mdx/, "")
        }
    }));
    return {
        paths,
        fallback: false
    }
}