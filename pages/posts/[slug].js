import Head from "next/head";
import { getFileBySlug, getFiles } from "../../lib/mdx";
import { MDXRemote } from "next-mdx-remote";
import styles from '../../styles/SlugPage.module.css';
import { Header } from "../../components/Header";
import Image from "next/image";
import { useEffect, useState } from "react";
import { Comment } from "../../components/Comment";

// -> ![text](/imageToShow.jpg "title")

export default function Post(props) {
    const [ comments, setComments ] = useState([]);
    useEffect(() => {
        const getComments = async () => {
            const response = await fetch(`http://localhost:8080/api/comments/get/${props.frontMatter.title}`);
            const data = await response.json();
            setComments(data);
        }
        getComments();
    }, []);
    const postSyncReply = (commentId, reply) => {
        setComments(comments.map((comment) => {
            if (comment._id === commentId) {
                return {
                    ...comment,
                    replies: [
                        ...comment.replies,
                        {
                            ...reply
                        }
                    ]
                }
            }
            return comment;
        }))
    }
    const postAsyncReply = async (document) => {
        try {
            const response = await fetch('http://localhost:8080/api/comments/save-reply', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(document)
            });
            const data = await response.json();
            console.log(data);
            if (data.insertedId) {
                const { _id, ...rest } = document;
                postSyncReply(_id, { ...rest, reply_id: data.insertedId });
            }
        }
        catch (error) {
            console.log(error);
        }
    } 
    return (
        <>
            <Head>
                <title>{props.frontMatter.title}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Header />
            <section className={styles.mainContentContainer}>
                <article className={styles.articleContainer}>
                    <p className={styles.articleDate}>{props.frontMatter.date}</p>
                    <h1 className={styles.articleTitle}>{props.frontMatter.title}</h1>
                    <span className={styles.articleAuthor}>
                        {"  By " + props.frontMatter.author}
                    </span>
                    <div className={styles.mainImageContainer}>
                        <Image
                            src={`/${props.frontMatter.main_image}`}
                            width={1000}
                            height={500}
                            className={styles.ImageMain}
                            alt={"main image"}
                        />
                    </div>
                    <div className={styles.articleContent}>
                        <MDXRemote {...props.source} />
                    </div>
                    <div
                        className={styles.commentsContainer}
                    >
                        <h2 className={styles.commentsTitle}> COMENTARIOS </h2>
                        <section
                            className={styles.commentsSection}
                        >
                            {
                                comments.map((comment) => <Comment {...comment} key={comment._id} postAsyncReply={postAsyncReply} />)
                            }
                        </section>
                        <textarea
                            className={styles.commentInput}
                            placeholder="Leave a comment"
                        >

                        </textarea>
                    </div>
                </article>
            </section>
        </>
    );
}

export async function getStaticProps({ params }) {
    const { source, frontMatter } = await getFileBySlug(params.slug);
    return {
        props: {
            source,
            frontMatter
        }
    }
}

export async function getStaticPaths() {
    const array = await getFiles();
    const paths = array.map(post => ({
        params: {
            slug: post.replace(/\.mdx/, "")
        }
    }));
    return {
        paths,
        fallback: false
    }
}