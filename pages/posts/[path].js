import Head from "next/head";
import styles from '../../styles/SlugPage.module.css';
import { Header } from "../../components/Header";
import Image from "next/image";
import { useEffect, useRef, useState } from "react";
import { Comment } from "../../components/Comment";
import { Button } from "../../components/Button";
import { useForm } from "../../hooks/useForm";
import { URL_API } from "../../API/api";
import { ReactMarkdown } from "react-markdown/lib/react-markdown";

// -> ![text](/imageToShow.jpg "title")

const commentInitialState = {
    author:'',
    comment: ''
}
const months = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
export default function Post({ post }) {
    /* SUBMIT MAIN COMMENT */
    const {current:postDate} = useRef( new Date(post.date) )
    const [{ author,comment}, handleInputChnage, reset] = useForm(commentInitialState);
    const postAsyncComment = async(e) => {
        e.preventDefault();
        const document = {
            author,
            comment, 
            postTitle: post.postName,
            likes: 0,
            replies: []
        }
        try
        {
            const response = await fetch(`${URL_API}/comments/save-comment`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(document)
            })
            const data = await response.json();
            if( data.insertedId )
            {
                postSyncComment({ ...document, _id: data.insertedId });
                reset();
            }
        }
        catch(error)
        {
            console.log(error);
        }
    }
    const postSyncComment = (comment) => {
        setComments([
            ...comments,
            comment
        ])
    }    
    /*  REPLYES FUNCTINALITY */
    const [ comments, setComments ] = useState([]);
    useEffect(() => {
        const getComments = async () => {
            const response = await fetch(`${URL_API}/comments/get/${post.postName}`);
            const data = await response.json();
            setComments(data);
        }
        getComments();
    }, [post.postName]);
    const postSyncReply = (commentId, reply) => {
        setComments(comments.map((comment) => {
            if (comment._id === commentId) {
                return {
                    ...comment,
                    replies: [
                        ...comment.replies,
                        {
                            ...reply
                        }
                    ]
                }
            }
            return comment;
        }))
    }
    const postAsyncReply = async (document) => {
        try {
            const response = await fetch(`${URL_API}/comments/save-reply`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(document)
            });
            const data = await response.json();
            console.log(data);
            if (data.insertedId) {
                const { _id, ...rest } = document;
                postSyncReply(_id, { ...rest, reply_id: data.insertedId });
            }
        }
        catch (error) {
            console.log(error);
        }
    } 
    return (
        <>
            <Head>
                <title>{post.postName}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Header />
            <section className={styles.mainContentContainer}>
                <article className={styles.articleContainer}>
                    <p className={styles.articleDate}>{`${months[postDate.getMonth()]} ${postDate.getDate()} ${postDate.getFullYear()}`}</p>
                    <h1 className={styles.articleTitle}>{post.postName}</h1>
                    <span className={styles.articleAuthor}>
                        {"  By " + post.author}
                    </span>
                    <div className={styles.mainImageContainer}>
                        <Image
                            src={`${post.mainImage}`}
                            width={1000}
                            height={500}
                            className={styles.ImageMain}
                            alt={"main image"}
                        />
                    </div>
                    <div className={styles.articleContent}>
                        <ReactMarkdown>{post.content}</ReactMarkdown>
                    </div>
                    <div
                        className={styles.commentsContainer}
                    >
                        <h2 className={styles.commentsTitle}> COMENTARIOS </h2>
                        <section
                            className={styles.commentsSection}
                        >
                            {
                                comments.map((comment) => <Comment {...comment} key={comment._id} postAsyncReply={postAsyncReply} />)
                            }
                        </section>
                        <section
                            className={styles.commentsFormContainer}
                        >
                            <h3 className={styles.commentsTitle}>NUEVO COMENTARIO</h3>
                            <form>
                                <input 
                                    type="text" 
                                    placeholder="Nombre"
                                    className={styles.nameInput}
                                    name="author"
                                    onChange={handleInputChnage}
                                    value={author}
                                />
                                <textarea
                                    className={styles.commentInput}
                                    placeholder="Leave a comment"
                                    name="comment"
                                    onChange={handleInputChnage}
                                    value={comment}
                                >
                                </textarea>
                                <Button
                                    text="Publicar"
                                    theme="success"
                                    onSubmit={ postAsyncComment }
                                />
                            </form>
                        </section>
                    </div>
            {/* <Footer /> */}
                </article>
            </section>
        </>
    );
}

export async function getStaticProps({ params }) {
    const data = await fetch(`${URL_API}/posts/${params.path}`);
    const post = await data.json();

    return {
        props: {
            post
        }
    }
}

export async function getStaticPaths() {
    let data = await fetch(`${URL_API}/posts/paths`);
    data = await data.json();
    const paths = data.map(post => {
        return {
            params: {
                path: post.path
            }
        }
    });
    return {
        paths,
        fallback: false
    }

}